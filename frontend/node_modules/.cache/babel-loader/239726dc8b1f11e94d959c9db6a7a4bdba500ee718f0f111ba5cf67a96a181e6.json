{"ast":null,"code":"export class WebSocketFactory {\n  static detectEnvironment() {\n    var _a;\n    if (typeof WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: WebSocket\n      };\n    }\n    if (typeof globalThis !== 'undefined' && typeof globalThis.WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: globalThis.WebSocket\n      };\n    }\n    if (typeof global !== 'undefined' && typeof global.WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: global.WebSocket\n      };\n    }\n    if (typeof globalThis !== 'undefined' && typeof globalThis.WebSocketPair !== 'undefined' && typeof globalThis.WebSocket === 'undefined') {\n      return {\n        type: 'cloudflare',\n        error: 'Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.',\n        workaround: 'Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime.'\n      };\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.EdgeRuntime || typeof navigator !== 'undefined' && ((_a = navigator.userAgent) === null || _a === void 0 ? void 0 : _a.includes('Vercel-Edge'))) {\n      return {\n        type: 'unsupported',\n        error: 'Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.',\n        workaround: 'Use serverless functions or a different deployment target for WebSocket functionality.'\n      };\n    }\n    if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n      const nodeVersion = parseInt(process.versions.node.split('.')[0]);\n      // Node.js 22+ should have native WebSocket\n      if (nodeVersion >= 22) {\n        // Check if native WebSocket is available (should be in Node.js 22+)\n        if (typeof globalThis.WebSocket !== 'undefined') {\n          return {\n            type: 'native',\n            constructor: globalThis.WebSocket\n          };\n        }\n        // If not available, user needs to provide it\n        return {\n          type: 'unsupported',\n          error: `Node.js ${nodeVersion} detected but native WebSocket not found.`,\n          workaround: 'Provide a WebSocket implementation via the transport option.'\n        };\n      }\n      // Node.js < 22 doesn't have native WebSocket\n      return {\n        type: 'unsupported',\n        error: `Node.js ${nodeVersion} detected without native WebSocket support.`,\n        workaround: 'For Node.js < 22, install \"ws\" package and provide it via the transport option:\\n' + 'import ws from \"ws\"\\n' + 'new RealtimeClient(url, { transport: ws })'\n      };\n    }\n    return {\n      type: 'unsupported',\n      error: 'Unknown JavaScript runtime without WebSocket support.',\n      workaround: \"Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation.\"\n    };\n  }\n  static getWebSocketConstructor() {\n    const env = this.detectEnvironment();\n    if (env.constructor) {\n      return env.constructor;\n    }\n    let errorMessage = env.error || 'WebSocket not supported in this environment.';\n    if (env.workaround) {\n      errorMessage += `\\n\\nSuggested solution: ${env.workaround}`;\n    }\n    throw new Error(errorMessage);\n  }\n  static createWebSocket(url, protocols) {\n    const WS = this.getWebSocketConstructor();\n    return new WS(url, protocols);\n  }\n  static isWebSocketSupported() {\n    try {\n      const env = this.detectEnvironment();\n      return env.type === 'native' || env.type === 'ws';\n    } catch (_a) {\n      return false;\n    }\n  }\n}\nexport default WebSocketFactory;","map":{"version":3,"names":["WebSocketFactory","detectEnvironment","WebSocket","type","constructor","globalThis","global","WebSocketPair","error","workaround","EdgeRuntime","navigator","_a","userAgent","includes","process","versions","node","nodeVersion","parseInt","split","getWebSocketConstructor","env","errorMessage","Error","createWebSocket","url","protocols","WS","isWebSocketSupported"],"sources":["/Users/wajahat/NeuroLab-360/frontend/node_modules/@supabase/realtime-js/src/lib/websocket-factory.ts"],"sourcesContent":["export interface WebSocketLike {\n  readonly CONNECTING: number\n  readonly OPEN: number\n  readonly CLOSING: number\n  readonly CLOSED: number\n  readonly readyState: number\n  readonly url: string\n  readonly protocol: string\n\n  close(code?: number, reason?: string): void\n  send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void\n\n  onopen: ((this: any, ev: Event) => any) | null\n  onmessage: ((this: any, ev: MessageEvent) => any) | null\n  onclose: ((this: any, ev: CloseEvent) => any) | null\n  onerror: ((this: any, ev: Event) => any) | null\n\n  addEventListener(type: string, listener: EventListener): void\n  removeEventListener(type: string, listener: EventListener): void\n\n  // Add additional properties that may exist on WebSocket implementations\n  binaryType?: string\n  bufferedAmount?: number\n  extensions?: string\n  dispatchEvent?: (event: Event) => boolean\n}\n\nexport interface WebSocketEnvironment {\n  type: 'native' | 'ws' | 'cloudflare' | 'unsupported'\n  constructor?: any\n  error?: string\n  workaround?: string\n}\n\nexport class WebSocketFactory {\n  private static detectEnvironment(): WebSocketEnvironment {\n    if (typeof WebSocket !== 'undefined') {\n      return { type: 'native', constructor: WebSocket }\n    }\n\n    if (\n      typeof globalThis !== 'undefined' &&\n      typeof (globalThis as any).WebSocket !== 'undefined'\n    ) {\n      return { type: 'native', constructor: (globalThis as any).WebSocket }\n    }\n\n    if (\n      typeof global !== 'undefined' &&\n      typeof (global as any).WebSocket !== 'undefined'\n    ) {\n      return { type: 'native', constructor: (global as any).WebSocket }\n    }\n\n    if (\n      typeof globalThis !== 'undefined' &&\n      typeof (globalThis as any).WebSocketPair !== 'undefined' &&\n      typeof globalThis.WebSocket === 'undefined'\n    ) {\n      return {\n        type: 'cloudflare',\n        error:\n          'Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.',\n        workaround:\n          'Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime.',\n      }\n    }\n\n    if (\n      (typeof globalThis !== 'undefined' && (globalThis as any).EdgeRuntime) ||\n      (typeof navigator !== 'undefined' &&\n        navigator.userAgent?.includes('Vercel-Edge'))\n    ) {\n      return {\n        type: 'unsupported',\n        error:\n          'Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.',\n        workaround:\n          'Use serverless functions or a different deployment target for WebSocket functionality.',\n      }\n    }\n\n    if (\n      typeof process !== 'undefined' &&\n      process.versions &&\n      process.versions.node\n    ) {\n      const nodeVersion = parseInt(process.versions.node.split('.')[0])\n\n      // Node.js 22+ should have native WebSocket\n      if (nodeVersion >= 22) {\n        // Check if native WebSocket is available (should be in Node.js 22+)\n        if (typeof globalThis.WebSocket !== 'undefined') {\n          return { type: 'native', constructor: globalThis.WebSocket }\n        }\n        // If not available, user needs to provide it\n        return {\n          type: 'unsupported',\n          error: `Node.js ${nodeVersion} detected but native WebSocket not found.`,\n          workaround:\n            'Provide a WebSocket implementation via the transport option.',\n        }\n      }\n\n      // Node.js < 22 doesn't have native WebSocket\n      return {\n        type: 'unsupported',\n        error: `Node.js ${nodeVersion} detected without native WebSocket support.`,\n        workaround:\n          'For Node.js < 22, install \"ws\" package and provide it via the transport option:\\n' +\n          'import ws from \"ws\"\\n' +\n          'new RealtimeClient(url, { transport: ws })',\n      }\n    }\n\n    return {\n      type: 'unsupported',\n      error: 'Unknown JavaScript runtime without WebSocket support.',\n      workaround:\n        \"Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation.\",\n    }\n  }\n\n  public static getWebSocketConstructor(): typeof WebSocket {\n    const env = this.detectEnvironment()\n    if (env.constructor) {\n      return env.constructor\n    }\n    let errorMessage =\n      env.error || 'WebSocket not supported in this environment.'\n    if (env.workaround) {\n      errorMessage += `\\n\\nSuggested solution: ${env.workaround}`\n    }\n    throw new Error(errorMessage)\n  }\n\n  public static createWebSocket(\n    url: string | URL,\n    protocols?: string | string[]\n  ): WebSocketLike {\n    const WS = this.getWebSocketConstructor()\n    return new WS(url, protocols)\n  }\n\n  public static isWebSocketSupported(): boolean {\n    try {\n      const env = this.detectEnvironment()\n      return env.type === 'native' || env.type === 'ws'\n    } catch {\n      return false\n    }\n  }\n}\n\nexport default WebSocketFactory\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}